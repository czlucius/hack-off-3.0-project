"use strict";
/**
 * (C) Copyright IBM Corp. 2018, 2020.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var extend = require("extend");
var ibm_cloud_sdk_core_1 = require("ibm-cloud-sdk-core");
var common_1 = require("../lib/common");
/**
 * The IBM Watson&trade; Assistant service combines machine learning, natural language understanding, and an integrated
 * dialog editor to create conversation flows between your apps and your users.
 *
 * The Assistant v2 API provides runtime methods your client application can use to send user input to an assistant and
 * receive a response.
 */
var AssistantV2 = /** @class */ (function (_super) {
    __extends(AssistantV2, _super);
    /**
     * Construct a AssistantV2 object.
     *
     * @param {Object} options - Options for the service.
     * @param {string} options.version - The API version date to use with the service, in "YYYY-MM-DD" format. Whenever
     * the API is changed in a backwards incompatible way, a new minor version of the API is released. The service uses
     * the API version for the date you specify, or the most recent version before that date. Note that you should not
     * programmatically specify the current date at runtime, in case the API has been updated since your application's
     * release. Instead, specify a version date that is compatible with your application, and don't change it until your
     * application is ready for a later version.
     * @param {string} [options.serviceUrl] - The base url to use when contacting the service. The base url may differ between IBM Cloud regions.
     * @param {OutgoingHttpHeaders} [options.headers] - Default headers that shall be included with every request to the service.
     * @param {string} [options.serviceName] - The name of the service to configure
     * @param {Authenticator} [options.authenticator] - The Authenticator object used to authenticate requests to the service. Defaults to environment if not set
     * @constructor
     * @returns {AssistantV2}
     * @throws {Error}
     */
    function AssistantV2(options) {
        var _this = this;
        if (!options.serviceName) {
            options.serviceName = AssistantV2.DEFAULT_SERVICE_NAME;
        }
        // If the caller didn't supply an authenticator, construct one from external configuration.
        if (!options.authenticator) {
            options.authenticator = ibm_cloud_sdk_core_1.getAuthenticatorFromEnvironment(options.serviceName);
        }
        _this = _super.call(this, options) || this;
        _this.configureService(options.serviceName);
        if (options.serviceUrl) {
            _this.setServiceUrl(options.serviceUrl);
        }
        // check if 'version' was provided
        if (typeof _this.baseOptions.version === 'undefined') {
            throw new Error('Argument error: version was not specified');
        }
        _this.baseOptions.qs.version = options.version;
        return _this;
    }
    /*************************
     * sessions
     ************************/
    /**
     * Create a session.
     *
     * Create a new session. A session is used to send user input to a skill and receive responses. It also maintains the
     * state of the conversation. A session persists until it is deleted, or until it times out because of inactivity.
     * (For more information, see the
     * [documentation](https://cloud.ibm.com/docs/assistant?topic=assistant-assistant-settings).
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.assistantId - Unique identifier of the assistant. To find the assistant ID in the Watson
     * Assistant user interface, open the assistant settings and click **API Details**. For information about creating
     * assistants, see the
     * [documentation](https://cloud.ibm.com/docs/assistant?topic=assistant-assistant-add#assistant-add-task).
     *
     * **Note:** Currently, the v2 API does not support creating assistants.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response
     * @returns {Promise<AssistantV2.Response<AssistantV2.SessionResponse>>}
     */
    AssistantV2.prototype.createSession = function (params, callback) {
        var _this = this;
        var _params = extend({}, params);
        var _callback = callback;
        var requiredParams = ['assistantId'];
        return new Promise(function (resolve, reject) {
            var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
            if (missingParams) {
                if (_callback) {
                    _callback(missingParams);
                    return resolve();
                }
                return reject(missingParams);
            }
            var path = {
                'assistant_id': _params.assistantId
            };
            var sdkHeaders = common_1.getSdkHeaders(AssistantV2.DEFAULT_SERVICE_NAME, 'v2', 'createSession');
            var parameters = {
                options: {
                    url: '/v2/assistants/{assistant_id}/sessions',
                    method: 'POST',
                    path: path,
                },
                defaultOptions: extend(true, {}, _this.baseOptions, {
                    headers: extend(true, sdkHeaders, {
                        'Accept': 'application/json',
                    }, _params.headers),
                }),
            };
            return _this.createRequest(parameters).then(function (res) {
                if (_callback) {
                    _callback(null, res);
                }
                return resolve(res);
            }, function (err) {
                if (_callback) {
                    _callback(err);
                    return resolve();
                }
                return reject(err);
            });
        });
    };
    ;
    /**
     * Delete session.
     *
     * Deletes a session explicitly before it times out. (For more information about the session inactivity timeout, see
     * the [documentation](https://cloud.ibm.com/docs/assistant?topic=assistant-assistant-settings)).
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.assistantId - Unique identifier of the assistant. To find the assistant ID in the Watson
     * Assistant user interface, open the assistant settings and click **API Details**. For information about creating
     * assistants, see the
     * [documentation](https://cloud.ibm.com/docs/assistant?topic=assistant-assistant-add#assistant-add-task).
     *
     * **Note:** Currently, the v2 API does not support creating assistants.
     * @param {string} params.sessionId - Unique identifier of the session.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response
     * @returns {Promise<AssistantV2.Response<AssistantV2.Empty>>}
     */
    AssistantV2.prototype.deleteSession = function (params, callback) {
        var _this = this;
        var _params = extend({}, params);
        var _callback = callback;
        var requiredParams = ['assistantId', 'sessionId'];
        return new Promise(function (resolve, reject) {
            var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
            if (missingParams) {
                if (_callback) {
                    _callback(missingParams);
                    return resolve();
                }
                return reject(missingParams);
            }
            var path = {
                'assistant_id': _params.assistantId,
                'session_id': _params.sessionId
            };
            var sdkHeaders = common_1.getSdkHeaders(AssistantV2.DEFAULT_SERVICE_NAME, 'v2', 'deleteSession');
            var parameters = {
                options: {
                    url: '/v2/assistants/{assistant_id}/sessions/{session_id}',
                    method: 'DELETE',
                    path: path,
                },
                defaultOptions: extend(true, {}, _this.baseOptions, {
                    headers: extend(true, sdkHeaders, {
                        'Accept': 'application/json',
                    }, _params.headers),
                }),
            };
            return _this.createRequest(parameters).then(function (res) {
                if (_callback) {
                    _callback(null, res);
                }
                return resolve(res);
            }, function (err) {
                if (_callback) {
                    _callback(err);
                    return resolve();
                }
                return reject(err);
            });
        });
    };
    ;
    /*************************
     * message
     ************************/
    /**
     * Send user input to assistant (stateful).
     *
     * Send user input to an assistant and receive a response, with conversation state (including context data) stored by
     * Watson Assistant for the duration of the session.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.assistantId - Unique identifier of the assistant. To find the assistant ID in the Watson
     * Assistant user interface, open the assistant settings and click **API Details**. For information about creating
     * assistants, see the
     * [documentation](https://cloud.ibm.com/docs/assistant?topic=assistant-assistant-add#assistant-add-task).
     *
     * **Note:** Currently, the v2 API does not support creating assistants.
     * @param {string} params.sessionId - Unique identifier of the session.
     * @param {MessageInput} [params.input] - An input object that includes the input text.
     * @param {MessageContext} [params.context] - Context data for the conversation. You can use this property to set or
     * modify context variables, which can also be accessed by dialog nodes. The context is stored by the assistant on a
     * per-session basis.
     *
     * **Note:** The total size of the context data stored for a stateful session cannot exceed 100KB.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response
     * @returns {Promise<AssistantV2.Response<AssistantV2.MessageResponse>>}
     */
    AssistantV2.prototype.message = function (params, callback) {
        var _this = this;
        var _params = extend({}, params);
        var _callback = callback;
        var requiredParams = ['assistantId', 'sessionId'];
        return new Promise(function (resolve, reject) {
            var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
            if (missingParams) {
                if (_callback) {
                    _callback(missingParams);
                    return resolve();
                }
                return reject(missingParams);
            }
            var body = {
                'input': _params.input,
                'context': _params.context
            };
            var path = {
                'assistant_id': _params.assistantId,
                'session_id': _params.sessionId
            };
            var sdkHeaders = common_1.getSdkHeaders(AssistantV2.DEFAULT_SERVICE_NAME, 'v2', 'message');
            var parameters = {
                options: {
                    url: '/v2/assistants/{assistant_id}/sessions/{session_id}/message',
                    method: 'POST',
                    body: body,
                    path: path,
                },
                defaultOptions: extend(true, {}, _this.baseOptions, {
                    headers: extend(true, sdkHeaders, {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json',
                    }, _params.headers),
                }),
            };
            return _this.createRequest(parameters).then(function (res) {
                if (_callback) {
                    _callback(null, res);
                }
                return resolve(res);
            }, function (err) {
                if (_callback) {
                    _callback(err);
                    return resolve();
                }
                return reject(err);
            });
        });
    };
    ;
    /**
     * Send user input to assistant (stateless).
     *
     * Send user input to an assistant and receive a response, with conversation state (including context data) managed by
     * your application.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.assistantId - Unique identifier of the assistant. To find the assistant ID in the Watson
     * Assistant user interface, open the assistant settings and click **API Details**. For information about creating
     * assistants, see the
     * [documentation](https://cloud.ibm.com/docs/assistant?topic=assistant-assistant-add#assistant-add-task).
     *
     * **Note:** Currently, the v2 API does not support creating assistants.
     * @param {MessageInputStateless} [params.input] - An input object that includes the input text.
     * @param {MessageContextStateless} [params.context] - Context data for the conversation. You can use this property to
     * set or modify context variables, which can also be accessed by dialog nodes. The context is not stored by the
     * assistant. To maintain session state, include the context from the previous response.
     *
     * **Note:** The total size of the context data for a stateless session cannot exceed 250KB.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response
     * @returns {Promise<AssistantV2.Response<AssistantV2.MessageResponseStateless>>}
     */
    AssistantV2.prototype.messageStateless = function (params, callback) {
        var _this = this;
        var _params = extend({}, params);
        var _callback = callback;
        var requiredParams = ['assistantId'];
        return new Promise(function (resolve, reject) {
            var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
            if (missingParams) {
                if (_callback) {
                    _callback(missingParams);
                    return resolve();
                }
                return reject(missingParams);
            }
            var body = {
                'input': _params.input,
                'context': _params.context
            };
            var path = {
                'assistant_id': _params.assistantId
            };
            var sdkHeaders = common_1.getSdkHeaders(AssistantV2.DEFAULT_SERVICE_NAME, 'v2', 'messageStateless');
            var parameters = {
                options: {
                    url: '/v2/assistants/{assistant_id}/message',
                    method: 'POST',
                    body: body,
                    path: path,
                },
                defaultOptions: extend(true, {}, _this.baseOptions, {
                    headers: extend(true, sdkHeaders, {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json',
                    }, _params.headers),
                }),
            };
            return _this.createRequest(parameters).then(function (res) {
                if (_callback) {
                    _callback(null, res);
                }
                return resolve(res);
            }, function (err) {
                if (_callback) {
                    _callback(err);
                    return resolve();
                }
                return reject(err);
            });
        });
    };
    ;
    /*************************
     * logs
     ************************/
    /**
     * List log events for an assistant.
     *
     * List the events from the log of an assistant.
     *
     * This method is available only with Premium plans.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.assistantId - Unique identifier of the assistant. To find the assistant ID in the Watson
     * Assistant user interface, open the assistant settings and click **API Details**. For information about creating
     * assistants, see the
     * [documentation](https://cloud.ibm.com/docs/assistant?topic=assistant-assistant-add#assistant-add-task).
     *
     * **Note:** Currently, the v2 API does not support creating assistants.
     * @param {string} [params.sort] - How to sort the returned log events. You can sort by **request_timestamp**. To
     * reverse the sort order, prefix the parameter value with a minus sign (`-`).
     * @param {string} [params.filter] - A cacheable parameter that limits the results to those matching the specified
     * filter. For more information, see the
     * [documentation](https://cloud.ibm.com/docs/assistant?topic=assistant-filter-reference#filter-reference).
     * @param {number} [params.pageLimit] - The number of records to return in each page of results.
     * @param {string} [params.cursor] - A token identifying the page of results to retrieve.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response
     * @returns {Promise<AssistantV2.Response<AssistantV2.LogCollection>>}
     */
    AssistantV2.prototype.listLogs = function (params, callback) {
        var _this = this;
        var _params = extend({}, params);
        var _callback = callback;
        var requiredParams = ['assistantId'];
        return new Promise(function (resolve, reject) {
            var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
            if (missingParams) {
                if (_callback) {
                    _callback(missingParams);
                    return resolve();
                }
                return reject(missingParams);
            }
            var query = {
                'sort': _params.sort,
                'filter': _params.filter,
                'page_limit': _params.pageLimit,
                'cursor': _params.cursor
            };
            var path = {
                'assistant_id': _params.assistantId
            };
            var sdkHeaders = common_1.getSdkHeaders(AssistantV2.DEFAULT_SERVICE_NAME, 'v2', 'listLogs');
            var parameters = {
                options: {
                    url: '/v2/assistants/{assistant_id}/logs',
                    method: 'GET',
                    qs: query,
                    path: path,
                },
                defaultOptions: extend(true, {}, _this.baseOptions, {
                    headers: extend(true, sdkHeaders, {
                        'Accept': 'application/json',
                    }, _params.headers),
                }),
            };
            return _this.createRequest(parameters).then(function (res) {
                if (_callback) {
                    _callback(null, res);
                }
                return resolve(res);
            }, function (err) {
                if (_callback) {
                    _callback(err);
                    return resolve();
                }
                return reject(err);
            });
        });
    };
    ;
    /*************************
     * userData
     ************************/
    /**
     * Delete labeled data.
     *
     * Deletes all data associated with a specified customer ID. The method has no effect if no data is associated with
     * the customer ID.
     *
     * You associate a customer ID with data by passing the `X-Watson-Metadata` header with a request that passes data.
     * For more information about personal data and customer IDs, see [Information
     * security](https://cloud.ibm.com/docs/assistant?topic=assistant-information-security#information-security).
     *
     * This operation is limited to 4 requests per minute. For more information, see **Rate limiting**.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.customerId - The customer ID for which all data is to be deleted.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response
     * @returns {Promise<AssistantV2.Response<AssistantV2.Empty>>}
     */
    AssistantV2.prototype.deleteUserData = function (params, callback) {
        var _this = this;
        var _params = extend({}, params);
        var _callback = callback;
        var requiredParams = ['customerId'];
        return new Promise(function (resolve, reject) {
            var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
            if (missingParams) {
                if (_callback) {
                    _callback(missingParams);
                    return resolve();
                }
                return reject(missingParams);
            }
            var query = {
                'customer_id': _params.customerId
            };
            var sdkHeaders = common_1.getSdkHeaders(AssistantV2.DEFAULT_SERVICE_NAME, 'v2', 'deleteUserData');
            var parameters = {
                options: {
                    url: '/v2/user_data',
                    method: 'DELETE',
                    qs: query,
                },
                defaultOptions: extend(true, {}, _this.baseOptions, {
                    headers: extend(true, sdkHeaders, {
                        'Accept': 'application/json',
                    }, _params.headers),
                }),
            };
            return _this.createRequest(parameters).then(function (res) {
                if (_callback) {
                    _callback(null, res);
                }
                return resolve(res);
            }, function (err) {
                if (_callback) {
                    _callback(err);
                    return resolve();
                }
                return reject(err);
            });
        });
    };
    ;
    AssistantV2.DEFAULT_SERVICE_URL = 'https://api.us-south.assistant.watson.cloud.ibm.com';
    AssistantV2.DEFAULT_SERVICE_NAME = 'conversation';
    return AssistantV2;
}(ibm_cloud_sdk_core_1.BaseService));
module.exports = AssistantV2;
