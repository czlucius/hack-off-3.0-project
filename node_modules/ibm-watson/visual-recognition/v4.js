"use strict";
/**
 * (C) Copyright IBM Corp. 2019, 2020.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var extend = require("extend");
var ibm_cloud_sdk_core_1 = require("ibm-cloud-sdk-core");
var common_1 = require("../lib/common");
/**
 * Provide images to the IBM Watson&trade; Visual Recognition service for analysis. The service detects objects based on
 * a set of images with training data.
 */
var VisualRecognitionV4 = /** @class */ (function (_super) {
    __extends(VisualRecognitionV4, _super);
    /**
     * Construct a VisualRecognitionV4 object.
     *
     * @param {Object} options - Options for the service.
     * @param {string} options.version - The API version date to use with the service, in "YYYY-MM-DD" format. Whenever
     * the API is changed in a backwards incompatible way, a new minor version of the API is released. The service uses
     * the API version for the date you specify, or the most recent version before that date. Note that you should not
     * programmatically specify the current date at runtime, in case the API has been updated since your application's
     * release. Instead, specify a version date that is compatible with your application, and don't change it until your
     * application is ready for a later version.
     * @param {string} [options.serviceUrl] - The base url to use when contacting the service. The base url may differ between IBM Cloud regions.
     * @param {OutgoingHttpHeaders} [options.headers] - Default headers that shall be included with every request to the service.
     * @param {string} [options.serviceName] - The name of the service to configure
     * @param {Authenticator} [options.authenticator] - The Authenticator object used to authenticate requests to the service. Defaults to environment if not set
     * @constructor
     * @returns {VisualRecognitionV4}
     * @throws {Error}
     */
    function VisualRecognitionV4(options) {
        var _this = this;
        console.warn("On 1 December 2021, Visual Recognition will no longer be available. \n    For more information, see https://github.com/watson-developer-cloud/node-sdk/tree/master#visual-recognition-deprecation");
        if (!options.serviceName) {
            options.serviceName = VisualRecognitionV4.DEFAULT_SERVICE_NAME;
        }
        // If the caller didn't supply an authenticator, construct one from external configuration.
        if (!options.authenticator) {
            options.authenticator = ibm_cloud_sdk_core_1.getAuthenticatorFromEnvironment(options.serviceName);
        }
        _this = _super.call(this, options) || this;
        _this.configureService(options.serviceName);
        if (options.serviceUrl) {
            _this.setServiceUrl(options.serviceUrl);
        }
        // check if 'version' was provided
        if (typeof _this.baseOptions.version === 'undefined') {
            throw new Error('Argument error: version was not specified');
        }
        _this.baseOptions.qs.version = options.version;
        return _this;
    }
    /*************************
     * analysis
     ************************/
    /**
     * Analyze images.
     *
     * Analyze images by URL, by file, or both against your own collection. Make sure that
     * **training_status.objects.ready** is `true` for the feature before you use a collection to analyze images.
     *
     * Encode the image and .zip file names in UTF-8 if they contain non-ASCII characters. The service assumes UTF-8
     * encoding if it encounters non-ASCII characters.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string[]} params.collectionIds - The IDs of the collections to analyze.
     * @param {string[]} params.features - The features to analyze.
     * @param {FileWithMetadata[]} [params.imagesFile] - An array of image files (.jpg or .png) or .zip files with images.
     * - Include a maximum of 20 images in a request.
     * - Limit the .zip file to 100 MB.
     * - Limit each image file to 10 MB.
     *
     * You can also include an image with the **image_url** parameter.
     * @param {string[]} [params.imageUrl] - An array of URLs of image files (.jpg or .png).
     * - Include a maximum of 20 images in a request.
     * - Limit each image file to 10 MB.
     * - Minimum width and height is 30 pixels, but the service tends to perform better with images that are at least 300
     * x 300 pixels. Maximum is 5400 pixels for either height or width.
     *
     * You can also include images with the **images_file** parameter.
     * @param {number} [params.threshold] - The minimum score a feature must have to be returned.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response
     * @returns {Promise<VisualRecognitionV4.Response<VisualRecognitionV4.AnalyzeResponse>>}
     */
    VisualRecognitionV4.prototype.analyze = function (params, callback) {
        var _this = this;
        var _params = extend({}, params);
        var _callback = callback;
        var requiredParams = ['collectionIds', 'features'];
        return new Promise(function (resolve, reject) {
            var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
            if (missingParams) {
                if (_callback) {
                    _callback(missingParams);
                    return resolve();
                }
                return reject(missingParams);
            }
            var formData = {
                'collection_ids': Array.isArray(_params.collectionIds) ? _params.collectionIds.join(',') : _params.collectionIds,
                'features': Array.isArray(_params.features) ? _params.features.join(',') : _params.features,
                'images_file': _params.imagesFile,
                'image_url': _params.imageUrl,
                'threshold': _params.threshold
            };
            var sdkHeaders = common_1.getSdkHeaders(VisualRecognitionV4.DEFAULT_SERVICE_NAME, 'v4', 'analyze');
            var parameters = {
                options: {
                    url: '/v4/analyze',
                    method: 'POST',
                    formData: formData
                },
                defaultOptions: extend(true, {}, _this.baseOptions, {
                    headers: extend(true, sdkHeaders, {
                        'Accept': 'application/json',
                        'Content-Type': 'multipart/form-data',
                    }, _params.headers),
                }),
            };
            return _this.createRequest(parameters).then(function (res) {
                if (_callback) {
                    _callback(null, res);
                }
                return resolve(res);
            }, function (err) {
                if (_callback) {
                    _callback(err);
                    return resolve();
                }
                return reject(err);
            });
        });
    };
    ;
    /*************************
     * collections
     ************************/
    /**
     * Create a collection.
     *
     * Create a collection that can be used to store images.
     *
     * To create a collection without specifying a name and description, include an empty JSON object in the request body.
     *
     * Encode the name and description in UTF-8 if they contain non-ASCII characters. The service assumes UTF-8 encoding
     * if it encounters non-ASCII characters.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {string} [params.name] - The name of the collection. The name can contain alphanumeric, underscore, hyphen,
     * and dot characters. It cannot begin with the reserved prefix `sys-`.
     * @param {string} [params.description] - The description of the collection.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response
     * @returns {Promise<VisualRecognitionV4.Response<VisualRecognitionV4.Collection>>}
     */
    VisualRecognitionV4.prototype.createCollection = function (params, callback) {
        var _this = this;
        var _params = (typeof params === 'function' && !callback) ? {} : extend({}, params);
        var _callback = (typeof params === 'function' && !callback) ? params : callback;
        return new Promise(function (resolve, reject) {
            var body = {
                'name': _params.name,
                'description': _params.description
            };
            var sdkHeaders = common_1.getSdkHeaders(VisualRecognitionV4.DEFAULT_SERVICE_NAME, 'v4', 'createCollection');
            var parameters = {
                options: {
                    url: '/v4/collections',
                    method: 'POST',
                    body: body,
                },
                defaultOptions: extend(true, {}, _this.baseOptions, {
                    headers: extend(true, sdkHeaders, {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json',
                    }, _params.headers),
                }),
            };
            return _this.createRequest(parameters).then(function (res) {
                if (_callback) {
                    _callback(null, res);
                }
                return resolve(res);
            }, function (err) {
                if (_callback) {
                    _callback(err);
                    return resolve();
                }
                return reject(err);
            });
        });
    };
    ;
    /**
     * List collections.
     *
     * Retrieves a list of collections for the service instance.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response
     * @returns {Promise<VisualRecognitionV4.Response<VisualRecognitionV4.CollectionsList>>}
     */
    VisualRecognitionV4.prototype.listCollections = function (params, callback) {
        var _this = this;
        var _params = (typeof params === 'function' && !callback) ? {} : extend({}, params);
        var _callback = (typeof params === 'function' && !callback) ? params : callback;
        return new Promise(function (resolve, reject) {
            var sdkHeaders = common_1.getSdkHeaders(VisualRecognitionV4.DEFAULT_SERVICE_NAME, 'v4', 'listCollections');
            var parameters = {
                options: {
                    url: '/v4/collections',
                    method: 'GET',
                },
                defaultOptions: extend(true, {}, _this.baseOptions, {
                    headers: extend(true, sdkHeaders, {
                        'Accept': 'application/json',
                    }, _params.headers),
                }),
            };
            return _this.createRequest(parameters).then(function (res) {
                if (_callback) {
                    _callback(null, res);
                }
                return resolve(res);
            }, function (err) {
                if (_callback) {
                    _callback(err);
                    return resolve();
                }
                return reject(err);
            });
        });
    };
    ;
    /**
     * Get collection details.
     *
     * Get details of one collection.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.collectionId - The identifier of the collection.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response
     * @returns {Promise<VisualRecognitionV4.Response<VisualRecognitionV4.Collection>>}
     */
    VisualRecognitionV4.prototype.getCollection = function (params, callback) {
        var _this = this;
        var _params = extend({}, params);
        var _callback = callback;
        var requiredParams = ['collectionId'];
        return new Promise(function (resolve, reject) {
            var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
            if (missingParams) {
                if (_callback) {
                    _callback(missingParams);
                    return resolve();
                }
                return reject(missingParams);
            }
            var path = {
                'collection_id': _params.collectionId
            };
            var sdkHeaders = common_1.getSdkHeaders(VisualRecognitionV4.DEFAULT_SERVICE_NAME, 'v4', 'getCollection');
            var parameters = {
                options: {
                    url: '/v4/collections/{collection_id}',
                    method: 'GET',
                    path: path,
                },
                defaultOptions: extend(true, {}, _this.baseOptions, {
                    headers: extend(true, sdkHeaders, {
                        'Accept': 'application/json',
                    }, _params.headers),
                }),
            };
            return _this.createRequest(parameters).then(function (res) {
                if (_callback) {
                    _callback(null, res);
                }
                return resolve(res);
            }, function (err) {
                if (_callback) {
                    _callback(err);
                    return resolve();
                }
                return reject(err);
            });
        });
    };
    ;
    /**
     * Update a collection.
     *
     * Update the name or description of a collection.
     *
     * Encode the name and description in UTF-8 if they contain non-ASCII characters. The service assumes UTF-8 encoding
     * if it encounters non-ASCII characters.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.collectionId - The identifier of the collection.
     * @param {string} [params.name] - The name of the collection. The name can contain alphanumeric, underscore, hyphen,
     * and dot characters. It cannot begin with the reserved prefix `sys-`.
     * @param {string} [params.description] - The description of the collection.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response
     * @returns {Promise<VisualRecognitionV4.Response<VisualRecognitionV4.Collection>>}
     */
    VisualRecognitionV4.prototype.updateCollection = function (params, callback) {
        var _this = this;
        var _params = extend({}, params);
        var _callback = callback;
        var requiredParams = ['collectionId'];
        return new Promise(function (resolve, reject) {
            var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
            if (missingParams) {
                if (_callback) {
                    _callback(missingParams);
                    return resolve();
                }
                return reject(missingParams);
            }
            var body = {
                'name': _params.name,
                'description': _params.description
            };
            var path = {
                'collection_id': _params.collectionId
            };
            var sdkHeaders = common_1.getSdkHeaders(VisualRecognitionV4.DEFAULT_SERVICE_NAME, 'v4', 'updateCollection');
            var parameters = {
                options: {
                    url: '/v4/collections/{collection_id}',
                    method: 'POST',
                    body: body,
                    path: path,
                },
                defaultOptions: extend(true, {}, _this.baseOptions, {
                    headers: extend(true, sdkHeaders, {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json',
                    }, _params.headers),
                }),
            };
            return _this.createRequest(parameters).then(function (res) {
                if (_callback) {
                    _callback(null, res);
                }
                return resolve(res);
            }, function (err) {
                if (_callback) {
                    _callback(err);
                    return resolve();
                }
                return reject(err);
            });
        });
    };
    ;
    /**
     * Delete a collection.
     *
     * Delete a collection from the service instance.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.collectionId - The identifier of the collection.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response
     * @returns {Promise<VisualRecognitionV4.Response<VisualRecognitionV4.Empty>>}
     */
    VisualRecognitionV4.prototype.deleteCollection = function (params, callback) {
        var _this = this;
        var _params = extend({}, params);
        var _callback = callback;
        var requiredParams = ['collectionId'];
        return new Promise(function (resolve, reject) {
            var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
            if (missingParams) {
                if (_callback) {
                    _callback(missingParams);
                    return resolve();
                }
                return reject(missingParams);
            }
            var path = {
                'collection_id': _params.collectionId
            };
            var sdkHeaders = common_1.getSdkHeaders(VisualRecognitionV4.DEFAULT_SERVICE_NAME, 'v4', 'deleteCollection');
            var parameters = {
                options: {
                    url: '/v4/collections/{collection_id}',
                    method: 'DELETE',
                    path: path,
                },
                defaultOptions: extend(true, {}, _this.baseOptions, {
                    headers: extend(true, sdkHeaders, {
                        'Accept': 'application/json',
                    }, _params.headers),
                }),
            };
            return _this.createRequest(parameters).then(function (res) {
                if (_callback) {
                    _callback(null, res);
                }
                return resolve(res);
            }, function (err) {
                if (_callback) {
                    _callback(err);
                    return resolve();
                }
                return reject(err);
            });
        });
    };
    ;
    /**
     * Get a model.
     *
     * Download a model that you can deploy to detect objects in images. The collection must include a generated model,
     * which is indicated in the response for the collection details as `"rscnn_ready": true`. If the value is `false`,
     * train or retrain the collection to generate the model.
     *
     * Currently, the model format is specific to Android apps. For more information about how to deploy the model to your
     * app, see the [Watson Visual Recognition on Android](https://github.com/matt-ny/rscnn) project in GitHub.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.collectionId - The identifier of the collection.
     * @param {string} params.feature - The feature for the model.
     * @param {string} params.modelFormat - The format of the returned model.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response
     * @returns {Promise<VisualRecognitionV4.Response<NodeJS.ReadableStream|Buffer>>}
     */
    VisualRecognitionV4.prototype.getModelFile = function (params, callback) {
        var _this = this;
        var _params = extend({}, params);
        var _callback = callback;
        var requiredParams = ['collectionId', 'feature', 'modelFormat'];
        return new Promise(function (resolve, reject) {
            var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
            if (missingParams) {
                if (_callback) {
                    _callback(missingParams);
                    return resolve();
                }
                return reject(missingParams);
            }
            var query = {
                'feature': _params.feature,
                'model_format': _params.modelFormat
            };
            var path = {
                'collection_id': _params.collectionId
            };
            var sdkHeaders = common_1.getSdkHeaders(VisualRecognitionV4.DEFAULT_SERVICE_NAME, 'v4', 'getModelFile');
            var parameters = {
                options: {
                    url: '/v4/collections/{collection_id}/model',
                    method: 'GET',
                    qs: query,
                    path: path,
                    responseType: 'stream',
                },
                defaultOptions: extend(true, {}, _this.baseOptions, {
                    headers: extend(true, sdkHeaders, {
                        'Accept': 'application/octet-stream',
                    }, _params.headers),
                }),
            };
            return _this.createRequest(parameters).then(function (res) {
                if (_callback) {
                    _callback(null, res);
                }
                return resolve(res);
            }, function (err) {
                if (_callback) {
                    _callback(err);
                    return resolve();
                }
                return reject(err);
            });
        });
    };
    ;
    /*************************
     * images
     ************************/
    /**
     * Add images.
     *
     * Add images to a collection by URL, by file, or both.
     *
     * Encode the image and .zip file names in UTF-8 if they contain non-ASCII characters. The service assumes UTF-8
     * encoding if it encounters non-ASCII characters.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.collectionId - The identifier of the collection.
     * @param {FileWithMetadata[]} [params.imagesFile] - An array of image files (.jpg or .png) or .zip files with images.
     * - Include a maximum of 20 images in a request.
     * - Limit the .zip file to 100 MB.
     * - Limit each image file to 10 MB.
     *
     * You can also include an image with the **image_url** parameter.
     * @param {string[]} [params.imageUrl] - The array of URLs of image files (.jpg or .png).
     * - Include a maximum of 20 images in a request.
     * - Limit each image file to 10 MB.
     * - Minimum width and height is 30 pixels, but the service tends to perform better with images that are at least 300
     * x 300 pixels. Maximum is 5400 pixels for either height or width.
     *
     * You can also include images with the **images_file** parameter.
     * @param {string} [params.trainingData] - Training data for a single image. Include training data only if you add one
     * image with the request.
     *
     * The `object` property can contain alphanumeric, underscore, hyphen, space, and dot characters. It cannot begin with
     * the reserved prefix `sys-` and must be no longer than 32 characters.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response
     * @returns {Promise<VisualRecognitionV4.Response<VisualRecognitionV4.ImageDetailsList>>}
     */
    VisualRecognitionV4.prototype.addImages = function (params, callback) {
        var _this = this;
        var _params = extend({}, params);
        var _callback = callback;
        var requiredParams = ['collectionId'];
        return new Promise(function (resolve, reject) {
            var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
            if (missingParams) {
                if (_callback) {
                    _callback(missingParams);
                    return resolve();
                }
                return reject(missingParams);
            }
            var formData = {
                'images_file': _params.imagesFile,
                'image_url': _params.imageUrl,
                'training_data': _params.trainingData
            };
            var path = {
                'collection_id': _params.collectionId
            };
            var sdkHeaders = common_1.getSdkHeaders(VisualRecognitionV4.DEFAULT_SERVICE_NAME, 'v4', 'addImages');
            var parameters = {
                options: {
                    url: '/v4/collections/{collection_id}/images',
                    method: 'POST',
                    path: path,
                    formData: formData
                },
                defaultOptions: extend(true, {}, _this.baseOptions, {
                    headers: extend(true, sdkHeaders, {
                        'Accept': 'application/json',
                        'Content-Type': 'multipart/form-data',
                    }, _params.headers),
                }),
            };
            return _this.createRequest(parameters).then(function (res) {
                if (_callback) {
                    _callback(null, res);
                }
                return resolve(res);
            }, function (err) {
                if (_callback) {
                    _callback(err);
                    return resolve();
                }
                return reject(err);
            });
        });
    };
    ;
    /**
     * List images.
     *
     * Retrieves a list of images in a collection.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.collectionId - The identifier of the collection.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response
     * @returns {Promise<VisualRecognitionV4.Response<VisualRecognitionV4.ImageSummaryList>>}
     */
    VisualRecognitionV4.prototype.listImages = function (params, callback) {
        var _this = this;
        var _params = extend({}, params);
        var _callback = callback;
        var requiredParams = ['collectionId'];
        return new Promise(function (resolve, reject) {
            var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
            if (missingParams) {
                if (_callback) {
                    _callback(missingParams);
                    return resolve();
                }
                return reject(missingParams);
            }
            var path = {
                'collection_id': _params.collectionId
            };
            var sdkHeaders = common_1.getSdkHeaders(VisualRecognitionV4.DEFAULT_SERVICE_NAME, 'v4', 'listImages');
            var parameters = {
                options: {
                    url: '/v4/collections/{collection_id}/images',
                    method: 'GET',
                    path: path,
                },
                defaultOptions: extend(true, {}, _this.baseOptions, {
                    headers: extend(true, sdkHeaders, {
                        'Accept': 'application/json',
                    }, _params.headers),
                }),
            };
            return _this.createRequest(parameters).then(function (res) {
                if (_callback) {
                    _callback(null, res);
                }
                return resolve(res);
            }, function (err) {
                if (_callback) {
                    _callback(err);
                    return resolve();
                }
                return reject(err);
            });
        });
    };
    ;
    /**
     * Get image details.
     *
     * Get the details of an image in a collection.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.collectionId - The identifier of the collection.
     * @param {string} params.imageId - The identifier of the image.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response
     * @returns {Promise<VisualRecognitionV4.Response<VisualRecognitionV4.ImageDetails>>}
     */
    VisualRecognitionV4.prototype.getImageDetails = function (params, callback) {
        var _this = this;
        var _params = extend({}, params);
        var _callback = callback;
        var requiredParams = ['collectionId', 'imageId'];
        return new Promise(function (resolve, reject) {
            var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
            if (missingParams) {
                if (_callback) {
                    _callback(missingParams);
                    return resolve();
                }
                return reject(missingParams);
            }
            var path = {
                'collection_id': _params.collectionId,
                'image_id': _params.imageId
            };
            var sdkHeaders = common_1.getSdkHeaders(VisualRecognitionV4.DEFAULT_SERVICE_NAME, 'v4', 'getImageDetails');
            var parameters = {
                options: {
                    url: '/v4/collections/{collection_id}/images/{image_id}',
                    method: 'GET',
                    path: path,
                },
                defaultOptions: extend(true, {}, _this.baseOptions, {
                    headers: extend(true, sdkHeaders, {
                        'Accept': 'application/json',
                    }, _params.headers),
                }),
            };
            return _this.createRequest(parameters).then(function (res) {
                if (_callback) {
                    _callback(null, res);
                }
                return resolve(res);
            }, function (err) {
                if (_callback) {
                    _callback(err);
                    return resolve();
                }
                return reject(err);
            });
        });
    };
    ;
    /**
     * Delete an image.
     *
     * Delete one image from a collection.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.collectionId - The identifier of the collection.
     * @param {string} params.imageId - The identifier of the image.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response
     * @returns {Promise<VisualRecognitionV4.Response<VisualRecognitionV4.Empty>>}
     */
    VisualRecognitionV4.prototype.deleteImage = function (params, callback) {
        var _this = this;
        var _params = extend({}, params);
        var _callback = callback;
        var requiredParams = ['collectionId', 'imageId'];
        return new Promise(function (resolve, reject) {
            var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
            if (missingParams) {
                if (_callback) {
                    _callback(missingParams);
                    return resolve();
                }
                return reject(missingParams);
            }
            var path = {
                'collection_id': _params.collectionId,
                'image_id': _params.imageId
            };
            var sdkHeaders = common_1.getSdkHeaders(VisualRecognitionV4.DEFAULT_SERVICE_NAME, 'v4', 'deleteImage');
            var parameters = {
                options: {
                    url: '/v4/collections/{collection_id}/images/{image_id}',
                    method: 'DELETE',
                    path: path,
                },
                defaultOptions: extend(true, {}, _this.baseOptions, {
                    headers: extend(true, sdkHeaders, {
                        'Accept': 'application/json',
                    }, _params.headers),
                }),
            };
            return _this.createRequest(parameters).then(function (res) {
                if (_callback) {
                    _callback(null, res);
                }
                return resolve(res);
            }, function (err) {
                if (_callback) {
                    _callback(err);
                    return resolve();
                }
                return reject(err);
            });
        });
    };
    ;
    /**
     * Get a JPEG file of an image.
     *
     * Download a JPEG representation of an image.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.collectionId - The identifier of the collection.
     * @param {string} params.imageId - The identifier of the image.
     * @param {string} [params.size] - The image size. Specify `thumbnail` to return a version that maintains the original
     * aspect ratio but is no larger than 200 pixels in the larger dimension. For example, an original 800 x 1000 image is
     * resized to 160 x 200 pixels.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response
     * @returns {Promise<VisualRecognitionV4.Response<NodeJS.ReadableStream|Buffer>>}
     */
    VisualRecognitionV4.prototype.getJpegImage = function (params, callback) {
        var _this = this;
        var _params = extend({}, params);
        var _callback = callback;
        var requiredParams = ['collectionId', 'imageId'];
        return new Promise(function (resolve, reject) {
            var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
            if (missingParams) {
                if (_callback) {
                    _callback(missingParams);
                    return resolve();
                }
                return reject(missingParams);
            }
            var query = {
                'size': _params.size
            };
            var path = {
                'collection_id': _params.collectionId,
                'image_id': _params.imageId
            };
            var sdkHeaders = common_1.getSdkHeaders(VisualRecognitionV4.DEFAULT_SERVICE_NAME, 'v4', 'getJpegImage');
            var parameters = {
                options: {
                    url: '/v4/collections/{collection_id}/images/{image_id}/jpeg',
                    method: 'GET',
                    qs: query,
                    path: path,
                    responseType: 'stream',
                },
                defaultOptions: extend(true, {}, _this.baseOptions, {
                    headers: extend(true, sdkHeaders, {
                        'Accept': 'image/jpeg',
                    }, _params.headers),
                }),
            };
            return _this.createRequest(parameters).then(function (res) {
                if (_callback) {
                    _callback(null, res);
                }
                return resolve(res);
            }, function (err) {
                if (_callback) {
                    _callback(err);
                    return resolve();
                }
                return reject(err);
            });
        });
    };
    ;
    /*************************
     * objects
     ************************/
    /**
     * List object metadata.
     *
     * Retrieves a list of object names in a collection.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.collectionId - The identifier of the collection.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response
     * @returns {Promise<VisualRecognitionV4.Response<VisualRecognitionV4.ObjectMetadataList>>}
     */
    VisualRecognitionV4.prototype.listObjectMetadata = function (params, callback) {
        var _this = this;
        var _params = extend({}, params);
        var _callback = callback;
        var requiredParams = ['collectionId'];
        return new Promise(function (resolve, reject) {
            var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
            if (missingParams) {
                if (_callback) {
                    _callback(missingParams);
                    return resolve();
                }
                return reject(missingParams);
            }
            var path = {
                'collection_id': _params.collectionId
            };
            var sdkHeaders = common_1.getSdkHeaders(VisualRecognitionV4.DEFAULT_SERVICE_NAME, 'v4', 'listObjectMetadata');
            var parameters = {
                options: {
                    url: '/v4/collections/{collection_id}/objects',
                    method: 'GET',
                    path: path,
                },
                defaultOptions: extend(true, {}, _this.baseOptions, {
                    headers: extend(true, sdkHeaders, {
                        'Accept': 'application/json',
                    }, _params.headers),
                }),
            };
            return _this.createRequest(parameters).then(function (res) {
                if (_callback) {
                    _callback(null, res);
                }
                return resolve(res);
            }, function (err) {
                if (_callback) {
                    _callback(err);
                    return resolve();
                }
                return reject(err);
            });
        });
    };
    ;
    /**
     * Update an object name.
     *
     * Update the name of an object. A successful request updates the training data for all images that use the object.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.collectionId - The identifier of the collection.
     * @param {string} params.object - The name of the object.
     * @param {string} params.newObject - The updated name of the object. The name can contain alphanumeric, underscore,
     * hyphen, space, and dot characters. It cannot begin with the reserved prefix `sys-`.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response
     * @returns {Promise<VisualRecognitionV4.Response<VisualRecognitionV4.UpdateObjectMetadata>>}
     */
    VisualRecognitionV4.prototype.updateObjectMetadata = function (params, callback) {
        var _this = this;
        var _params = extend({}, params);
        var _callback = callback;
        var requiredParams = ['collectionId', 'object', 'newObject'];
        return new Promise(function (resolve, reject) {
            var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
            if (missingParams) {
                if (_callback) {
                    _callback(missingParams);
                    return resolve();
                }
                return reject(missingParams);
            }
            var body = {
                'object': _params.newObject
            };
            var path = {
                'collection_id': _params.collectionId,
                'object': _params.object
            };
            var sdkHeaders = common_1.getSdkHeaders(VisualRecognitionV4.DEFAULT_SERVICE_NAME, 'v4', 'updateObjectMetadata');
            var parameters = {
                options: {
                    url: '/v4/collections/{collection_id}/objects/{object}',
                    method: 'POST',
                    body: body,
                    path: path,
                },
                defaultOptions: extend(true, {}, _this.baseOptions, {
                    headers: extend(true, sdkHeaders, {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json',
                    }, _params.headers),
                }),
            };
            return _this.createRequest(parameters).then(function (res) {
                if (_callback) {
                    _callback(null, res);
                }
                return resolve(res);
            }, function (err) {
                if (_callback) {
                    _callback(err);
                    return resolve();
                }
                return reject(err);
            });
        });
    };
    ;
    /**
     * Get object metadata.
     *
     * Get the number of bounding boxes for a single object in a collection.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.collectionId - The identifier of the collection.
     * @param {string} params.object - The name of the object.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response
     * @returns {Promise<VisualRecognitionV4.Response<VisualRecognitionV4.ObjectMetadata>>}
     */
    VisualRecognitionV4.prototype.getObjectMetadata = function (params, callback) {
        var _this = this;
        var _params = extend({}, params);
        var _callback = callback;
        var requiredParams = ['collectionId', 'object'];
        return new Promise(function (resolve, reject) {
            var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
            if (missingParams) {
                if (_callback) {
                    _callback(missingParams);
                    return resolve();
                }
                return reject(missingParams);
            }
            var path = {
                'collection_id': _params.collectionId,
                'object': _params.object
            };
            var sdkHeaders = common_1.getSdkHeaders(VisualRecognitionV4.DEFAULT_SERVICE_NAME, 'v4', 'getObjectMetadata');
            var parameters = {
                options: {
                    url: '/v4/collections/{collection_id}/objects/{object}',
                    method: 'GET',
                    path: path,
                },
                defaultOptions: extend(true, {}, _this.baseOptions, {
                    headers: extend(true, sdkHeaders, {
                        'Accept': 'application/json',
                    }, _params.headers),
                }),
            };
            return _this.createRequest(parameters).then(function (res) {
                if (_callback) {
                    _callback(null, res);
                }
                return resolve(res);
            }, function (err) {
                if (_callback) {
                    _callback(err);
                    return resolve();
                }
                return reject(err);
            });
        });
    };
    ;
    /**
     * Delete an object.
     *
     * Delete one object from a collection. A successful request deletes the training data from all images that use the
     * object.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.collectionId - The identifier of the collection.
     * @param {string} params.object - The name of the object.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response
     * @returns {Promise<VisualRecognitionV4.Response<VisualRecognitionV4.Empty>>}
     */
    VisualRecognitionV4.prototype.deleteObject = function (params, callback) {
        var _this = this;
        var _params = extend({}, params);
        var _callback = callback;
        var requiredParams = ['collectionId', 'object'];
        return new Promise(function (resolve, reject) {
            var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
            if (missingParams) {
                if (_callback) {
                    _callback(missingParams);
                    return resolve();
                }
                return reject(missingParams);
            }
            var path = {
                'collection_id': _params.collectionId,
                'object': _params.object
            };
            var sdkHeaders = common_1.getSdkHeaders(VisualRecognitionV4.DEFAULT_SERVICE_NAME, 'v4', 'deleteObject');
            var parameters = {
                options: {
                    url: '/v4/collections/{collection_id}/objects/{object}',
                    method: 'DELETE',
                    path: path,
                },
                defaultOptions: extend(true, {}, _this.baseOptions, {
                    headers: extend(true, sdkHeaders, {
                        'Accept': 'application/json',
                    }, _params.headers),
                }),
            };
            return _this.createRequest(parameters).then(function (res) {
                if (_callback) {
                    _callback(null, res);
                }
                return resolve(res);
            }, function (err) {
                if (_callback) {
                    _callback(err);
                    return resolve();
                }
                return reject(err);
            });
        });
    };
    ;
    /*************************
     * training
     ************************/
    /**
     * Train a collection.
     *
     * Start training on images in a collection. The collection must have enough training data and untrained data (the
     * **training_status.objects.data_changed** is `true`). If training is in progress, the request queues the next
     * training job.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.collectionId - The identifier of the collection.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response
     * @returns {Promise<VisualRecognitionV4.Response<VisualRecognitionV4.Collection>>}
     */
    VisualRecognitionV4.prototype.train = function (params, callback) {
        var _this = this;
        var _params = extend({}, params);
        var _callback = callback;
        var requiredParams = ['collectionId'];
        return new Promise(function (resolve, reject) {
            var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
            if (missingParams) {
                if (_callback) {
                    _callback(missingParams);
                    return resolve();
                }
                return reject(missingParams);
            }
            var path = {
                'collection_id': _params.collectionId
            };
            var sdkHeaders = common_1.getSdkHeaders(VisualRecognitionV4.DEFAULT_SERVICE_NAME, 'v4', 'train');
            var parameters = {
                options: {
                    url: '/v4/collections/{collection_id}/train',
                    method: 'POST',
                    path: path,
                },
                defaultOptions: extend(true, {}, _this.baseOptions, {
                    headers: extend(true, sdkHeaders, {
                        'Accept': 'application/json',
                    }, _params.headers),
                }),
            };
            return _this.createRequest(parameters).then(function (res) {
                if (_callback) {
                    _callback(null, res);
                }
                return resolve(res);
            }, function (err) {
                if (_callback) {
                    _callback(err);
                    return resolve();
                }
                return reject(err);
            });
        });
    };
    ;
    /**
     * Add training data to an image.
     *
     * Add, update, or delete training data for an image. Encode the object name in UTF-8 if it contains non-ASCII
     * characters. The service assumes UTF-8 encoding if it encounters non-ASCII characters.
     *
     * Elements in the request replace the existing elements.
     *
     * - To update the training data, provide both the unchanged and the new or changed values.
     *
     * - To delete the training data, provide an empty value for the training data.
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.collectionId - The identifier of the collection.
     * @param {string} params.imageId - The identifier of the image.
     * @param {TrainingDataObject[]} [params.objects] - Training data for specific objects.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response
     * @returns {Promise<VisualRecognitionV4.Response<VisualRecognitionV4.TrainingDataObjects>>}
     */
    VisualRecognitionV4.prototype.addImageTrainingData = function (params, callback) {
        var _this = this;
        var _params = extend({}, params);
        var _callback = callback;
        var requiredParams = ['collectionId', 'imageId'];
        return new Promise(function (resolve, reject) {
            var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
            if (missingParams) {
                if (_callback) {
                    _callback(missingParams);
                    return resolve();
                }
                return reject(missingParams);
            }
            var body = {
                'objects': _params.objects
            };
            var path = {
                'collection_id': _params.collectionId,
                'image_id': _params.imageId
            };
            var sdkHeaders = common_1.getSdkHeaders(VisualRecognitionV4.DEFAULT_SERVICE_NAME, 'v4', 'addImageTrainingData');
            var parameters = {
                options: {
                    url: '/v4/collections/{collection_id}/images/{image_id}/training_data',
                    method: 'POST',
                    body: body,
                    path: path,
                },
                defaultOptions: extend(true, {}, _this.baseOptions, {
                    headers: extend(true, sdkHeaders, {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json',
                    }, _params.headers),
                }),
            };
            return _this.createRequest(parameters).then(function (res) {
                if (_callback) {
                    _callback(null, res);
                }
                return resolve(res);
            }, function (err) {
                if (_callback) {
                    _callback(err);
                    return resolve();
                }
                return reject(err);
            });
        });
    };
    ;
    /**
     * Get training usage.
     *
     * Information about the completed training events. You can use this information to determine how close you are to the
     * training limits for the month.
     *
     * @param {Object} [params] - The parameters to send to the service.
     * @param {string} [params.startTime] - The earliest day to include training events. Specify dates in YYYY-MM-DD
     * format. If empty or not specified, the earliest training event is included.
     * @param {string} [params.endTime] - The most recent day to include training events. Specify dates in YYYY-MM-DD
     * format. All events for the day are included. If empty or not specified, the current day is used. Specify the same
     * value as `start_time` to request events for a single day.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response
     * @returns {Promise<VisualRecognitionV4.Response<VisualRecognitionV4.TrainingEvents>>}
     */
    VisualRecognitionV4.prototype.getTrainingUsage = function (params, callback) {
        var _this = this;
        var _params = (typeof params === 'function' && !callback) ? {} : extend({}, params);
        var _callback = (typeof params === 'function' && !callback) ? params : callback;
        return new Promise(function (resolve, reject) {
            var query = {
                'start_time': _params.startTime,
                'end_time': _params.endTime
            };
            var sdkHeaders = common_1.getSdkHeaders(VisualRecognitionV4.DEFAULT_SERVICE_NAME, 'v4', 'getTrainingUsage');
            var parameters = {
                options: {
                    url: '/v4/training_usage',
                    method: 'GET',
                    qs: query,
                },
                defaultOptions: extend(true, {}, _this.baseOptions, {
                    headers: extend(true, sdkHeaders, {
                        'Accept': 'application/json',
                    }, _params.headers),
                }),
            };
            return _this.createRequest(parameters).then(function (res) {
                if (_callback) {
                    _callback(null, res);
                }
                return resolve(res);
            }, function (err) {
                if (_callback) {
                    _callback(err);
                    return resolve();
                }
                return reject(err);
            });
        });
    };
    ;
    /*************************
     * userData
     ************************/
    /**
     * Delete labeled data.
     *
     * Deletes all data associated with a specified customer ID. The method has no effect if no data is associated with
     * the customer ID.
     *
     * You associate a customer ID with data by passing the `X-Watson-Metadata` header with a request that passes data.
     * For more information about personal data and customer IDs, see [Information
     * security](https://cloud.ibm.com/docs/visual-recognition?topic=visual-recognition-information-security).
     *
     * @param {Object} params - The parameters to send to the service.
     * @param {string} params.customerId - The customer ID for which all data is to be deleted.
     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
     * @param {Function} [callback] - The callback that handles the response
     * @returns {Promise<VisualRecognitionV4.Response<VisualRecognitionV4.Empty>>}
     */
    VisualRecognitionV4.prototype.deleteUserData = function (params, callback) {
        var _this = this;
        var _params = extend({}, params);
        var _callback = callback;
        var requiredParams = ['customerId'];
        return new Promise(function (resolve, reject) {
            var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);
            if (missingParams) {
                if (_callback) {
                    _callback(missingParams);
                    return resolve();
                }
                return reject(missingParams);
            }
            var query = {
                'customer_id': _params.customerId
            };
            var sdkHeaders = common_1.getSdkHeaders(VisualRecognitionV4.DEFAULT_SERVICE_NAME, 'v4', 'deleteUserData');
            var parameters = {
                options: {
                    url: '/v4/user_data',
                    method: 'DELETE',
                    qs: query,
                },
                defaultOptions: extend(true, {}, _this.baseOptions, {
                    headers: extend(true, sdkHeaders, {
                        'Accept': 'application/json',
                    }, _params.headers),
                }),
            };
            return _this.createRequest(parameters).then(function (res) {
                if (_callback) {
                    _callback(null, res);
                }
                return resolve(res);
            }, function (err) {
                if (_callback) {
                    _callback(err);
                    return resolve();
                }
                return reject(err);
            });
        });
    };
    ;
    VisualRecognitionV4.DEFAULT_SERVICE_URL = 'https://api.us-south.visual-recognition.watson.cloud.ibm.com';
    VisualRecognitionV4.DEFAULT_SERVICE_NAME = 'watson_vision_combined';
    return VisualRecognitionV4;
}(ibm_cloud_sdk_core_1.BaseService));
/*************************
 * interfaces
 ************************/
(function (VisualRecognitionV4) {
    /** Constants for the `analyze` operation. */
    var AnalyzeConstants;
    (function (AnalyzeConstants) {
        /** The features to analyze. */
        var Features;
        (function (Features) {
            Features["OBJECTS"] = "objects";
        })(Features = AnalyzeConstants.Features || (AnalyzeConstants.Features = {}));
    })(AnalyzeConstants = VisualRecognitionV4.AnalyzeConstants || (VisualRecognitionV4.AnalyzeConstants = {}));
    /** Constants for the `getModelFile` operation. */
    var GetModelFileConstants;
    (function (GetModelFileConstants) {
        /** The feature for the model. */
        var Feature;
        (function (Feature) {
            Feature["OBJECTS"] = "objects";
        })(Feature = GetModelFileConstants.Feature || (GetModelFileConstants.Feature = {}));
        /** The format of the returned model. */
        var ModelFormat;
        (function (ModelFormat) {
            ModelFormat["RSCNN"] = "rscnn";
        })(ModelFormat = GetModelFileConstants.ModelFormat || (GetModelFileConstants.ModelFormat = {}));
    })(GetModelFileConstants = VisualRecognitionV4.GetModelFileConstants || (VisualRecognitionV4.GetModelFileConstants = {}));
    /** Constants for the `getJpegImage` operation. */
    var GetJpegImageConstants;
    (function (GetJpegImageConstants) {
        /** The image size. Specify `thumbnail` to return a version that maintains the original aspect ratio but is no larger than 200 pixels in the larger dimension. For example, an original 800 x 1000 image is resized to 160 x 200 pixels. */
        var Size;
        (function (Size) {
            Size["FULL"] = "full";
            Size["THUMBNAIL"] = "thumbnail";
        })(Size = GetJpegImageConstants.Size || (GetJpegImageConstants.Size = {}));
    })(GetJpegImageConstants = VisualRecognitionV4.GetJpegImageConstants || (VisualRecognitionV4.GetJpegImageConstants = {}));
})(VisualRecognitionV4 || (VisualRecognitionV4 = {}));
module.exports = VisualRecognitionV4;
